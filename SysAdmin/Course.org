#+title: Lfs 207 Course
#+date: <2024-12-17 Tue>
#+duedate: <2024-06-30 Sun>
#+STARTUP: inlineimages visual-line-mode

* Table Of Contents :toc_1:
- [[#course-introduction][Course Introduction]]
- [[#linux-filesystem-tree-layout][Linux Filesystem Tree Layout]]
- [[#user-environment][User Environment]]
- [[#user-account-management][User Account Management]]
- [[#group-management][Group Management]]
- [[#file-permissions-and-ownership][File Permissions and Ownership]]
- [[#package-management-systems][Package Management Systems]]
- [[#dpkg][dpkg]]
- [[#apt][APT]]
- [[#rpm][RPM]]
- [[#dnf-and-yum][DNF and YUM]]
- [[#zypper][zypper]]
- [[#git-fundamentals][GIT Fundamentals]]
- [[#processes][Processes]]
- [[#process-monitoring][Process Monitoring]]
- [[#memory-monitoring-usage-and-configuring-swap][Memory Monitoring, Usage and Configuring Swap]]
- [[#io-monitoring][I/O Monitoring]]
- [[#ontainers--overview][ontainers ** Overview]]
- [[#linux-filesystems-and-the-vfs][Linux Filesystems and the VFS]]
- [[#disk-partitioning][Disk Partitioning]]
- [[#filesystem-features-attributes-creating-checking-usage-mounting][Filesystem Features: Attributes, Creating, Checking, Usage, Mounting]]
- [[#the-ext4-filesystem][The EXT4 Filesystem]]
- [[#logical-volume-management-lvm][Logical Volume Management (LVM)]]
- [[#kernel-services-and-configuration][Kernel Services and Configuration]]
- [[#kernel-modules][Kernel Modules]]
- [[#devices-and-udev][Devices and udev]]
- [[#network-addresses][Network Addresses]]
- [[#network-devices-and-configuration][Network Devices and Configuration]]
- [[#ldap][LDAP]]
- [[#firewalls][Firewalls]]
- [[#system-init-systemd-history-and-customization][System Init: systemd History and Customization]]
- [[#backup-and-recovery-methods][Backup and Recovery Methods]]
- [[#linux-security-modules][Linux Security Modules]]
- [[#system-rescue][System Rescue]]

* Course Introduction
** Course Information
To give your user access to sudo commands, one can use one of the following methods:
1. Adding a file with the user's name, in =/etc/sudoers.d/= sub directory with the content ~<username> ALL=(ALL) ALL~
2. Running the old command ~sudo chmod 440 /etc/sudoers.d/<username>~
   Note that some distros require 400 instead of 440

* Linux Filesystem Tree Layout
** Overview
** Linux Filesystem Tree Layout
*** Big Filesystem
Linux is just one big file system, unlike windows, which holds other stuff like registries.
Within this one large logical filesystem there may be more than one, even many, distinct filesystems, mounted at various points, which appear as subdirectories. These distinct filesystems are usually on different partitions, which can be on any number of devices, including those which are on a network.
Regardless of how things are joined together, it all just looks like one big filesystem; applications do not usually care at all about what physical device files actually reside on.
It used to be that different unix versions and linux distros had different ways of making this big tree, making the ecosystem quite hard to standardize
*** Data Distinctions
There are two kinds of distinctions for data stored on the tree:
1. Shareable and Non Shareable
   Shareable data is that which can be shared between different hosts. Non-shareable data is that which must be specific to a particular host. Such as user files and lock files (.lck)
2. Variable and Static
   Static data include binaries, libraries, documentation, and anything that does not change without system administrator assistance. Variable data is anything that may change, even without a system administrator's help.
*** FileSystem Hierarchy Standard
Administered originally by the Free Standards Group, and now by The Linux Foundation, specifies the main directories that need to be present, and describes their purposes. The [[https:refspecs.linuxfoundation.org/FHS_3.0/fhs-3.0.pdf][Filesystem Hierarchy Standard document]] can be retrieved online.
By specifying a standard layout, the FHS simplifies predictions of file locations. While most Linux distributions respect the FHS, probably none of them follow it exactly, and the last official version might not take into account some new developments.
Distributions like to experiment and eventually some of the experiments become generally accepted.
**** root Directory
=/= is not =/root=
The root partition must contain all essential files required to boot the system and then mount all other filesystems. Thus, it needs utilities, configuration files, boot loader information, and other essential startup data. It must be adequate to:
+ Boot the system.​
+ Restore the system from system backups on external media such as tapes and other removable media or NAS etc.​
+ Recover and/or repair the system; an experienced maintainer must have the tools to diagnose and reconstruct a damaged system.
According to the FHS, no application or package should create new subdirectories of the root directory.
**** bin Directory
The =/bin= directory is very important because:

+ It contains executable programs and scripts needed by both system administrators and unprivileged users, which are required when no other filesystems have yet been mounted; for example, when booting into single user or recovery mode.
+ It may also contain executables which are used indirectly by scripts.
+ It may not include any subdirectories.
Required programs which must exist in the =/bin/= directory include: cat, chgrp, chmod, chown, cp, date, dd, df, dmesg, echo, false, hostname, kill etc

Command binaries that are deemed not essential enough to merit a place in the =/bin= directory go in =/usr/bin=. Programs required only by non-root users are placed in this category.

Some recent distributions have abandoned the strategy of separating =/bin= and =/usr/bin= (as well as =/sbin= and =/usr/sbin=) and just have one directory with symbolic links, thereby preserving a two directory view.
They view the time-honored concept of enabling the possibility of placing =/usr= on a separate partition to be mounted after boot as obsolete.
**** boot Directory
The =/boot= directory contains everything required for the boot process. The two files which are absolutely essential are:

+ ~vmlinuz~: The compressed Linux kernel
+ ~initramfs~: The initial RAM filesystem, which is mounted before the real root filesystem becomes available.

It stores data used before the kernel begins executing user-mode programs.
It also includes two files used for information and debugging:
- ~config~: Used to configure the kernel compilation.
- ~System.map~: Kernel symbol table, used for debugging.

The exact contents of =/boot= will vary by distribution and time
**** dev Directory
It contains special device files (aka device nodes) which represent devices built into or connected to the system. Such device files represent character (byte-stream) and block I/O devices; network devices do not have device nodes in Linux, and are instead referenced by name, such as eth1 or wlan0.
All modern Linux distributions use the udev system, which creates nodes in the /dev directory only as needed when devices are found. If you were to look at the /dev directory on an unmounted filesystem, you would find it empty.
[[img:/images/dev_node.png]]
On ancient systems (or embedded devices), it can be created by MAKEDEV or mknod at install or at any other time, as needed.
**** etc Directory
This directory contains machine-local configuration files and some startup scripts; there should be no executable binary programs.
Files and directories which the FHS requires to be found in this directory include:
    csh.login, exports, fstab, ftpusers, gateways, gettydefs, group, host.conf, hosts.allow, hosts.deny, hosts.equiv, hosts.lpd, inetd.conf, inittab
Some of these files are pretty irrelevant today, such as mtools.conf, which is used by floppy disks. Some will not be found any more, no matter what the FHS says (lol), due to software obsolescence.
+ **/etc/skel**
  Contains skeleton files used to populate newly created home directories.
+ **/etc/systemd**
  Contains or points to configuration scripts for starting, stopping, and controlling system services when using systemd.
+ **/etc/init.d**
  Contains startup and shutdown scripts for when using System V initialization.
**** lib Directory
These directories should contain only those libraries needed to execute the binaries in =/bin= and =/sbin=. These libraries are particularly important for booting the system and executing commands within the root filesystem.
Kernel modules (often device or filesystem drivers) are located under =/lib/modules/<kernel-version-number>=.

PAM (Pluggable Authentication Modules) files are stored in distribution-dependent locations such as =/lib64/security= or =/lib/x86_64-linux-gnu/security=.
Systems which support both 32-bit and 64-bit binaries need to keep both kinds of libraries on the system. On some distributions, there are separate directories for 32-bit libraries (=/lib=) and 64-bit libraries (=/lib64=).
**** media Directory
This directory was typically used to mount filesystems on removable media. These include CDs, DVDs, and USB drives, and even floppy disks.
Linux systems mount such media dynamically upon insertion, and udev creates directories and then mounts the removable filesystems there, with names that are set with udev rules specified in configuration files. Upon unmounting and removal, the directories used as mount points disappear.
If the media has more than one partition and filesystem, more than one entry will appear.

Current distros mount removable media at =/run/media= instead of =/media=
**** mnt Directory
This directory is provided so that the system administrator can temporarily mount a filesystem when needed. A common use is for network filesystems, including:
+ NFS
+ Samba
+ CIFS
+ AFS
Historically, =/mnt= was also used for the kinds of files which are now mounted under =/media= (or =/run/media=) in modern systems.
Generally speaking, this directory should not be used by installation programs. Another temporary directory not currently being used serves better.
Command:
#+begin_src bash
sudo mount c8:/ISO_IMAGES /mnt
#+end_src
**** opt Directory
This directory is designed for software packages that wish to keep all or most of their files in one isolated place, rather than scatter them all over the system in directories shared by other software. For example, if ~dolphy_app~ were the name of a package which resided under =/opt=, then all of its files should reside in directories under =/opt/dolphy_app=, including =/opt/dolphy_app/bin= for binaries and =/opt/dolphy_app/man= for any man pages.
This can make both installing and uninstalling software relatively easy, as everything is in one convenient isolated location in a predictable and structured manner. It also makes it easier for system administrators to determine the nature of each file within a package.

Note, however, if one uses packaging systems such as RPM and APT, as we shall discuss later, it is also easy to install and uninstall with a clear sense of file manifests and locations, without exhibiting such antisocial behavior.

In Linux, the =/opt= directory is often used by application providers with either proprietary software, or those who like to avoid complications of distribution variance.
For example, on one system the packages are in =/opt/brother=, =/opt/zoom= and =/opt/google= and the latter has subdirectories for chrome and earth.

The directories =/opt/bin=, =/opt/doc=, =/opt/include=, =/opt/info=, =/opt/lib=, and =/opt/man= are reserved for local system administrator use. Packages may provide files which are linked or copied to these reserved directories, but the packages must also be able to function without the programs being in these special directories. Most systems do not populate these directories.
**** proc Directory
This directory is the mount point for a pseudo-filesystem, where all information resides only in memory, not on disk. Like =/dev=, the =/proc= directory is empty on a non-running system.

The kernel exposes some important data structures through =/proc= entries. Additionally, each active process on the system has its own subdirectory that gives detailed information about the state of the process, the resources it is using, and its history.
The entries in =/proc= are often termed virtual files and have interesting qualities. While most are listed as zero bytes in size, when viewed, they can contain a large amount of information.
In addition, most of the time and date settings on virtual files reflect the current time and date, indicative of the fact they are constantly changing. In fact, the information in these files is obtained only when they are viewed; they are not being constantly or periodically updated.

Important pseudo-files, including =/proc/interrupts=, =/proc/meminfo=, =/proc/mounts=, and =/proc/partitions=, provide an up-to-the-moment glimpse of the system's hardware.
Others, like =/proc/filesystems= and the =/proc/sys/= directory, provide system configuration information and interfaces.
For organizational purposes, files containing information on a similar topic are grouped into virtual directories and sub-directories. For instance, =/proc/scsi/= contains information for all physical SCSI devices. Likewise, the process directories contain information about each running process on the system.
**** sys Directory
This directory is the mount point for the ~sysfs~ pseudo-filesystem where all information resides only in memory, not on disk. Like =/dev= and =/proc=, the =/sys= directory is empty on a non-running system. It contains information about devices and drivers, kernel modules, system configuration structures, etc.

~sysfs~ is used both to gather information about the system, and modify its behavior while running. In that sense, it resembles =/proc=, but it is younger than and has adhered to strict standards about what kind of entries it can contain.
For example, almost all pseudo-files in =/sys= contain only one line, or value; there are none of the long entries you can find in =/proc=.
**** root Directory
This directory (pronounced "slash-root") is the home directory for the root user.
The root account that owns this directory should only be used for actions which require superuser privilege. For those actions which can be done as a non-privileged user, use another account.
**** sbin Directory
This directory contains binaries essential for booting, restoring, recovering, and/or repairing in addition to those binaries in the =/bin= directory. They also must be able to mount other filesystems on =/usr=, =/home= and other locations if needed, once the root filesystem is known to be in good health during boot.

The following programs should be included in this directory (if their subsystems are installed):
fdisk, fsck, getty, halt, ifconfig, init, mkfs, mkswap, reboot, route, swapon, swapoff, update.

Recent distribution versions of RHEL, CentOS, Fedora, and Ubuntu have symbolically linked /sbin and /usr/sbin so they are actually the same.
**** srv Directory
=/srv= contains site-specific data which is served by this system.
This main purpose of specifying this is so that users may find the location of the data files for particular service, and so that services which require a single tree for readonly data, writable data and scripts (such as cgi scripts) can be reasonably placed.
The methodology used to name subdirectories of =/srv= is unspecified as there is currently no consensus on how this should be done. One method for structuring data under =/srv= is by protocol, e.g. ~ftp, rsync, www, and cvs.~

Some system administrators (and distributions) swear by the use of the =/srv= directory; others ignore it. There is often confusion about what is best to go in =/var=, as opposed to =/srv=.
On Linux distributions such as Ubuntu and Red Hat-based ones, =/srv= is empty by default.
**** tmp Directory
This directory is used to store temporary files, and can be accessed by any user or application. However, the files on =/tmp= cannot be depended on to stay around for a long time:

- Some distributions run automated cron jobs, which remove any files older than 10 days typically, unless the purge scripts have been modified to exclude them.
- Some distributions remove the contents of =/tmp= with every reboot. This has been the Ubuntu policy.
- Some modern distributions utilize a virtual filesystem, using the =/tmp= directory only as a mount point for a ram disk using the tmpfs filesystem. This is the default policy on Fedora systems. When the system reboots, all information is thereby lost; =/tmp= is indeed temporary!

In the last case, you must avoid creating large files on =/tmp=; they will actually *occupy space in memory* rather than disk, and it is easy to harm or crash the system through memory exhaustion. While the guideline is for applications to avoid putting large files in =/tmp=, there are plenty of applications that violate this policy and which make large temporary files in =/tmp=. Even if it is possible to put them somewhere else (perhaps by specifying an environment variable), many users are not aware of how to configure this and all users have access to =/tmp=.

This policy can be canceled on systems using systemd, such as Fedora, by issuing the command:
#+begin_src bash
 sudo systemctl mask tmp.mount
#+end_src
followed by a system reboot.
**** usr Directory
The =/usr= directory can be thought of as a secondary hierarchy. It is used for files which are not needed for system booting. Indeed, =/usr= need not reside in the same partition as the root directory, and can be shared among hosts using the same system architecture across a network.
| Directory    | Purpose                                           |
| ---------    | -------                                           |
| /usr/bin     | Non-essential command binaries                    |
| /usr/etc     | Non-essential configuration files (usually empty) |
| /usr/games   | Game data                                         |
| /usr/include | Header files used to compile applications         |
| /usr/lib     | Library files                                     |
| /usr/lib64   | Library files for 64-bit                          |
| /usr/local   | Third-level hierarchy (for machine local files)   |
| /usr/sbin    | Non-essential system binaries                     |
| /usr/share   | Read-only architecture-independent files          |
| /usr/src     | Source code and headers for the Linux kernel      |
| /usr/tmp     | Secondary temporary directory                     |
**** var Directory
This directory contains variable (or volatile) data files that change frequently during system operation. These include:

- Log files
- Spool directories and files
- Administrative data files
- Transient and temporary files, such as cache contents.
Obviously, =/var= cannot be mounted as a read-only filesystem.
For security reasons, it is often considered a good idea to mount =/var= as a separate filesystem. Furthermore, if the directory gets filled up, it should not lock up the system.
=/var/log= is where most of the log files are located, and =/var/spool= is where local files for processes such as mail, printing, and cron jobs are stored while awaiting action.
| Subdirectory | Purpose                                                                        |
| ------------ | -------                                                                        |
| /var/ftp     | Used for ftp server base                                                       |
| /var/lib     | Persistent data modified by programs as they run                               |
| /var/lock    | Lock files used to control simultaneous access to resources                    |
| /var/log     | Log files                                                                      |
| /var/mail    | User mailboxes                                                                 |
| /var/run     | Information about the running system since the last boot                       |
| /var/spool   | Tasks spooled or waiting to be processed, such as print queues                 |
| /var/tmp     | Temporary files to be preserved across system reboot. Sometimes linked to /tmp |
| /var/www     | Root for website hierarchies                                                   |
**** run Directory
The purpose of /run is to store transient files: those that contain runtime information, which may need to be written early in system startup, and which do not need to be preserved when rebooting.

Generally, =/run= is implemented as an empty mount point, with a tmpfs ram disk (like =/dev/shm=) mounted there at runtime. Thus, this is a pseudo filesystem existing only in memory.
Some existing locations, such as =/var/run= and =/var/lock=, will be now just symbolic links to directories under =/run=. Other locations, depending on distribution taste, may also just point to locations under =/run=.

* User Environment
** Overview
** User Environment

* User Account Management
** Overview
** User Account Management

* Group Management
** Overview
** Group Management

* File Permissions and Ownership
** Overview
** File Permissions and Ownership

* Package Management Systems
** Overview
** Package Management Systems

* dpkg
** Overview
** dpkg

* APT
** Overview
** APT

* RPM
** Overview
** RPM

* DNF and YUM
** Overview
** dnf and yum

* zypper
** Overview
** zypper

* GIT Fundamentals
** Overview
** Introduction to GIT

* Processes
** Overview
** Processes

* Process Monitoring
** Overview
** Process Monitoring

* Memory Monitoring, Usage and Configuring Swap
** Overview
** Memory Monitoring, Usage and Configuring Swap

* I/O Monitoring
** Overview
** I/O Monitoring and Tuning

* ontainers ** Overview
** Overvie
** Container ** Overview


* Linux Filesystems and the VFS
** Overview
** Linux Filesystems and the VFS

* Disk Partitioning
** Overview
** Disk Partitioning

* Filesystem Features: Attributes, Creating, Checking, Usage, Mounting
** Overview
** Filesystem Features: Attributes, Creating, Checking, Usage, Mounting

* The EXT4 Filesystem
** Overview
** The Ext4 Filesystem

* Logical Volume Management (LVM)
** Overview
** Logical Volume Management

* Kernel Services and Configuration
** Overview
** Kernel Services and Configuration

* Kernel Modules
** Overview
** Kernel Modules

* Devices and udev
** Overview
** Devices and udev

* Network Addresses
** Overview
** Network Addresses

* Network Devices and Configuration
** Overview
** Network Devices and Configuration

* LDAP
** Overview
** LDAP

* Firewalls
** Overview
** Firewalls

* System Init: systemd History and Customization
** Overview
** System Init: systemd, SystemV and Upstart

* Backup and Recovery Methods
** Overview
** Backup and Recovery Methods

* Linux Security Modules
** Overview
** Linux Security Modules

* System Rescue
** Overview
** System Rescue

